server {
    listen 80;
    server_name example.com
        local.example.com
        local.example2.com
        local.example3.com
        local.example4.com;
    root /data/www;

    default_type 'text/plain; charset=utf-8';

    # 打印内置变量
    location = / {
        expires off;
        return 200
            "nginx variables:

# HTTP 请求基本信息
schema: $scheme
request_uri: $request_uri
request_filename: $request_filename
hostname: $hostname
## 客户端信息
remote_addr: $remote_addr
remote_port: $remote_port
## 当前处理请求的虚拟服务器信息（一个 IP 可能包含多个不同域名的虚拟主机）
server_name: $server_name
server_port: $server_port


# HTTP 请求头，按约定通过`$http_<header>`方式获取
Host: $host
Cookie: $http_cookie
Origin: $http_origin
If-None-Match: $http_if_none_match

proxy_host: $proxy_host
proxy_port: $proxy_port
";
    }

    # 协商缓存（基于 nginx 指令）
    location ~ .*html$ {
        add_header 'Content-Disposition' 'inline';
        # t < 0 时，效果等同 cache-control: no-cache
        expires -1;
    }

    # 强缓存（基于 nginx 指令）
    location ~ .*css$ {
        # t >= 0 时，效果等同 cache-control: max-age=t
        expires 1d;
    }

    # 协商缓存
    location /api/negotiated_cache {
        if ($http_if_none_match = '"abc"' ) {
            return 304;
        }

        add_header cache-control 'no-cache';
        # etag 一般基于资源内容的 hash 值、或时间戳、或版本号等计算，用于标识内容是否变化
        add_header etag '"abc"';
        return 200 '$request_uri';
    }

    # 强缓存
    location /api/strong_cache {
        add_header cache-control 'public, max-age=3600';
        return 200 '$request_uri';
    }

    # CORS
    # 浏览器跨域访问时，浏览器底层是可以正常收发请求的，但是浏览器会禁止网页访问跨域请求的响应
    # CORS 头的作用是指示浏览器，网页可以拿到哪些跨域请求的响应信息
    # NOTE: 非浏览器环境是没有跨域限制的(如通过 curl/node.js/go/java 等客户端发起的请求)
    location /api/cors {
        # nginx 不支持 if 嵌套，也不支持 if 中使用逻辑运算符，通过变量组合方式来替代多条件判断
        set $cors "";

        # 判断是否跨域
        # NOTE: 如果使用正则判断，注意变量的嵌入暂未找到方法
        # if ($http_origin !~ 'http://$server_name:$server_port' ) {
        if ($http_origin != 'http://$server_name:$server_port' ) {
            set $cors "cors$request_method";
        }

        # 非简单请求
        # 浏览器发出实际请求之前，会先发出一个 OPTIONS 的预检请求（浏览器自身的行为，网页无法干预），根据预检请求返回的结果决定是否可以发起实际请求
        # 注意：如果前后端之间有网关或防火墙，记得放通 OPTIONS 请求，否则会导致预检请求无法到达服务器
        if ($cors = 'corsOPTIONS' ) {
            # 指示浏览器：允许的 origin(即请求所在的网页，如 https://example.com:3334)，'*'表示允许任意 origin
            # NOTE: 如果请求需要携带凭证信息(如 cookie 等，网页中通过 XMLHttpRequest 中设置`withCredentials = true`或fetch 中设置`credentials = "include"`)，则不能使用'*'，必须使用具体的 origin
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            # 指示浏览器：允许的请求方法
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, PATCH, DELETE' always;
            # 指示浏览器：允许的请求头
            add_header 'Access-Control-Allow-Headers' '$http_access_control_request_headers' always;
            return 204;
        }

        # 简单请求，或非简单请求的实际请求
        if ($cors ~* "cors(POST|GET|PUT|PATCH|DELETE)" ) {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, PATCH, DELETE' always;
            add_header 'Access-Control-Allow-Headers' '$http_access_control_request_headers' always;
            return 200 'hello (cors)';
        }

        return 200 'hello (no cors)';
    }
}